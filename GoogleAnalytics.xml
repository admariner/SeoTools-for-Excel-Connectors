<?xml version="1.0" encoding="utf-8" ?>
<Suite Category="SEO" Title="Google Analytics" Id="GoogleAnalytics" RequireVersion="9.8" LoginButton="https://seotoolsforexcel.com/logins/google.png" SourceUrl="https://github.com/nielsbosma/SeoTools-for-Excel-Connectors/blob/master/GoogleAnalytics4.xml" HelpUrl="http://seotoolsforexcel.com/googleanalytics4/" HelpText="Documentation">

	<Author Name="Victor" Url="http://community.seotoolsforexcel.com/users/diskborste/activity"/>

	<GoogleOAuth2Authenticator ClientId="" ClientSecret="" Scope="https://www.googleapis.com/auth/analytics.readonly" StayAuthenticated="true"/>

	<Resources>
		<Resource Id="HttpSettingsHeaders">
			<RequestHeaders>
				<Header Name='Authorization'><![CDATA[Bearer @(Model.Authenticator.AccessToken)]]></Header>
			</RequestHeaders>
		</Resource>
		<Resource Id="Fail">
			<Fail>
				<Xpath Expr="//title"/>
				<JsonPath Expr="error.message"/>
			</Fail>
		</Resource>
	</Resources>

	<RestConnector Id="PropertiesList" Title="Properties" Hidden="true" HelpUrl="https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1beta/accountSummaries/list">
		<Fetch>
			<HttpSettings>
				<Resource Id="HttpSettingsHeaders"/>
			</HttpSettings>
			<Fetch.Url>
			<![CDATA[
			https://analyticsadmin.googleapis.com/v1beta/accountSummaries?pageSize=200
			]]>
			</Fetch.Url>
		</Fetch>
		<Parse>
			<XPath Expr="//propertySummaries">
				<Compute Id="PropertyId" Title="Property Id">
					<Compute.Expr>
						<![CDATA[
						@Model.Inp.Replace("properties/","")
						]]>
					</Compute.Expr>
					<XPath Expr="property" Id="Inp"/>
				</Compute>
				<XPath Expr="displayName" Id="Property Name"/>
				<XPath Expr="../displayName" Id="Account Name"/>
			</XPath>
		</Parse>200
		<Resource Id="Fail"/>
	</RestConnector>

	<RestConnector Id="FiltersList" Hidden="true">
		<Parameters>
			<Text Id="PropertyId" Title="Property Id" Required="true" Debug.DefaultValue="358884326" Select.Connector="PropertiesList"/>
		</Parameters>
		<Fetch>
			<HttpSettings>
				<Resource Id="HttpSettingsHeaders"/>
			</HttpSettings>
			<Fetch.Url>
			<![CDATA[
			https://analyticsdata.googleapis.com/v1beta/properties/@(Model.PropertyId)/metadata
			]]>
			</Fetch.Url>
		</Fetch>
		<Parse>
			<JsonPath Expr="$.*[*]">
				<JsonPath Expr="apiName" Id="Id"/>
			</JsonPath>
		</Parse>
		<Resource Id="Fail"/>
	</RestConnector>

	<RestConnector Id="MetricsList" Hidden="true">
		<Parameters>
			<Text Id="PropertyId" Title="Property Id" Required="true" Debug.DefaultValue="358884326" Select.Connector="PropertiesList"/>
		</Parameters>
		<Fetch>
			<HttpSettings>
				<Resource Id="HttpSettingsHeaders"/>
			</HttpSettings>
			<Fetch.Url>
				<![CDATA[
				https://analyticsdata.googleapis.com/v1beta/properties/@(Model.PropertyId)/metadata
				]]>
			</Fetch.Url>
		</Fetch>
	<Parse>
		<JsonPath Expr="$.metrics[*]">
			<JsonPath Expr="apiName" Id="Id"/>
			<JsonPath Expr="apiName" Id="Title"/>
			<JsonPath Expr="category" Id="Group"/>
			<JsonPath Expr="description" Id="Description"/>
		</JsonPath>
	</Parse>
		<Resource Id="Fail"/>
	</RestConnector>

	<RestConnector Id="DimensionsList" Hidden="True">
		<Parameters>
			<Text Id="PropertyId" Title="Property Id" Required="true" Debug.DefaultValue="358884326" Select.Connector="PropertiesList"/>
		</Parameters>
		<Fetch>
			<HttpSettings>
				<Resource Id="HttpSettingsHeaders"/>
			</HttpSettings>
			<Fetch.Url>
				<![CDATA[
				https://analyticsdata.googleapis.com/v1beta/properties/@(Model.PropertyId)/metadata
				]]>
			</Fetch.Url>
		</Fetch>
		<Parse>
			<JsonPath Expr="$.dimensions[*]">
				<JsonPath Expr="apiName" Id="Id"/>
				<JsonPath Expr="uiName" Id="Title"/>
				<JsonPath Expr="category" Id="Group"/>
				<JsonPath Expr="description" Id="Description"/>
			</JsonPath>
		</Parse>
		<Resource Id="Fail"/>
	</RestConnector>

	<RestConnector Id="BuildReport" Title="Build Report">
		<Parameters>
			<Text Id="PropertyId" Title="Property Id" Required="true" Debug.DefaultValue="358884326" Select.Connector="PropertiesList" HelpText="Select the property to request data from."/>
				<Text Id="Metrics" Required="true" Debug.DefaultValue="sessions,screenPageViews" MultiSelect.Connector="MetricsList" Parent.Id="PropertyId" Parent.Label="Property Id" HelpText="The aggregated statistics for user activity in a profile, such as clicks or pageviews."/>
				<Text Id="Dimensions" Required="false" Debug.DefaultValue="country,pageLocation" MultiSelect.Connector="DimensionsList" Parent.Id="PropertyId" Parent.Label="Property Id" HelpText="The dimensions parameter defines the primary data keys for your report."/>
				<Text Id="MetricsFilters" Title="Filter by Metrics" Debug.DefaultValue="" FilterSelect.Connector="MetricsList" FilterSelect.Operators="e,dne,gt,lt,gtoet,ltoet" Parent.Id="PropertyId" Parent.Label="Property Id" HelpText="The Metrics filters query string parameter restricts data based on one or more metric rules."/>
				<Text Id="DimensionsFilters" Title="Filter by Dimensions" FilterSelect.Operators="em,bw,ew,c,fr,pr" Debug.DefaultValue="" FilterSelect.Connector="DimensionsList" Parent.Id="PropertyId" Parent.Label="Property Id" HelpText="The Dimensions filters query string parameter restricts data based on one or more dimension rules."/>
				<Text Id="SortItem" Title="Sort Results" Debug.DefaultValue="pageLocation" SortSelect.TextIds="Metrics,Dimensions" HelpText="The order and direction to retreive the results"/>
			<DateInterval Id="DateInterval" Title="Date Interval"/>
			<Checkbox Id="KeepEmptyRows" Title="Keep Empty Rows" DefaultValue="True" HelpText="If false, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter."/>
		</Parameters>
		<Paging PageSize="1000" EvenPages="false">
			<Parse>
				<JsonPath Expr="$.rowCount" Id="AvaliableRows"/>
			</Parse>
		</Paging>
		<Fetch>
			<HttpSettings>
				<Resource Id="HttpSettingsHeaders"/>
				<RequestMethod>POST</RequestMethod>
				<RequestBody>
				<![CDATA[
				@jsonBody()
				]]>
				</RequestBody>
			</HttpSettings>
			<Fetch.Url>
			<![CDATA[
			https://analyticsdata.googleapis.com/v1beta/properties/@(Model.PropertyId):runReport
			]]>
			</Fetch.Url>
		</Fetch>
		<Parse>
			<Table DefaultConverter="auto">
				<JsonPath Id="Headers" Expr="..name">
					<JsonPath Expr="$"/>
				</JsonPath>
				<JsonPath Id="Cells" Expr="..value" DefaultValue="">
					<JsonPath Expr="$"/>
				</JsonPath>
		</Table>
		</Parse>
		<Resource Id="Fail"/>
	</RestConnector>

	<RazorFunctions>
	<![CDATA[
		string jsonBody() {
			var jsonObject = new
			{
				metrics = GetMetricsObject(),
				dimensions = GetDimensionsObject(),
				dateRanges = GetDateRanges(),
				orderBys = GetOrderBys(),
				metricFilter = GetMetricsFilters(),
				dimensionFilter = GetDimensionsFilters(),
				limit = @Model.PageCursor.NextTake,
				offset = @Model.PageCursor.NextSkip,
				keepEmptyRows = Model.KeepEmptyRows
			};

			return JsonConvert.SerializeObject(jsonObject, Formatting.Indented);
		}

		object GetMetricsObject() {
			string[] metricNames = Model.Metrics.Split(',');
			var metricObjects = new List<object>();

			foreach (var metricName in metricNames)
			{
				var metricObject = new { name = metricName };
				metricObjects.Add(metricObject);
			}

			return metricObjects;
		}

		object GetDimensionsObject() {
			if(string.IsNullOrEmpty(Model.Dimensions)) return null;
			string[] dimensionsNames = Model.Dimensions.Split(',');

			var dimensionsObjects = new List<object>();

			foreach (var dimensionName in dimensionsNames)
			{
				var dimensionObject = new { name = dimensionName };
				dimensionsObjects.Add(dimensionObject);
			}

			return dimensionsObjects;
		}

		object GetOrderBys() {
			if(string.IsNullOrEmpty(Model.SortItem)) return null;

			var sortObjects = new List<object>();

			string[] metricNames = Model.Metrics.Split(',');
			string[] dimensionNames = Model.Dimensions.Split(',');
			string[] sorts = Model.SortItem.Split(',');

			foreach (var sort in sorts)
			{
				string sortField = sort.StartsWith("-") ? sort.Substring(1) : sort;

				if (Array.IndexOf(metricNames, sortField) > -1)
				{
						var metric = new { metricName = sortField };
						var order = new { desc = sort.StartsWith("-"), metric };
						sortObjects.Add(order);
				}

				if (Array.IndexOf(dimensionNames, sortField) > -1)
				{
						var dimension = new { dimensionName = sortField };
						var order = new { desc = sort.StartsWith("-"), dimension };
						sortObjects.Add(order);
				}
			}
			return sortObjects;
		}

		object GetMetricsFilters() {
			if(string.IsNullOrEmpty(Model.MetricsFilters)) return null;

			var filters = Regex.Split(Model.MetricsFilters, @"(?<!\\)(?:;|,)");
			var regex = new Regex(@"^([:\w\d]*)(!=|==|=@|!@|=~|!~|>|<|>=|<=)(.*)");

			var expressions = new List<Expression>();

			foreach (var filter in filters)
			{
				var match = regex.Match(filter);

				if (match.Success) //detect double or int/string
				{
					var expression = new Expression
					{
						filter = new FilterExpression
						{
							numericFilter = new NumericFilter
							{
								value = new DoubleValue
								{
									doubleValue = Convert.ToDouble(match.Groups[3].Value.Trim())
								},
								operation = GetNumericalOperatorCode(match.Groups[2].Value.Trim())
							},
							fieldName = match.Groups[1].Value.Trim()
						}
					};

					expressions.Add(expression);
				}
			}

			bool isAndFilterOperator = Model.MetricsFilters.Split(';').Length >= Model.MetricsFilters.Split(',').Length;

			var typeObject = new Dictionary<string, object>
			{
				{ isAndFilterOperator ? "andGroup" : "orGroup", new Dictionary<string, object> { { "expressions", expressions } } }
			};

			return typeObject;
		}

		object GetDimensionsFilters() {
			if(string.IsNullOrEmpty(Model.DimensionsFilters)) return null;

			var filters = Regex.Split(Model.DimensionsFilters, @"(?<!\\)(?:;|,)");
			var regex = new Regex(@"^([:\w\d]*)(!=|==|=@|!@|=~|!~|>|<|>=|<=)(.*)");

			var expressions = new List<Expression>();

			foreach (var filter in filters)
			{
				var match = regex.Match(filter);

				if (match.Success)
				{
					var expression = new Expression
					{
						filter = new FilterExpression
						{
							stringFilter = new StringFilter
							{
								value = match.Groups[3].Value.Trim(),
								matchType = GetStringOperatorCode(match.Groups[2].Value.Trim())
							},
							fieldName = match.Groups[1].Value.Trim()
						}
					};

					expressions.Add(expression);
				}
			}

			bool isAndFilterOperator = Model.DimensionsFilters.Split(';').Length >= Model.DimensionsFilters.Split(',').Length;

			var typeObject = new Dictionary<string, object>
			{
				{ isAndFilterOperator ? "andGroup" : "orGroup", new Dictionary<string, object> { { "expressions", expressions } } }
			};

			return typeObject;
		}

		class Expression
		{
			public FilterExpression filter { get; set; }
		}

		class FilterExpression
		{
			public NumericFilter numericFilter { get; set; }
			public StringFilter stringFilter { get; set; }
			public string fieldName { get; set; }
		}

		class NumericFilter
		{
			public DoubleValue value { get; set; }
			public string operation { get; set; }
		}

		class StringFilter
		{
			public string value { get; set; }
			public string matchType { get; set; }
		}

		class DoubleValue
		{
			public double doubleValue { get; set; }
		}

		string GetNumericalOperatorCode(string op)
		{
			var mappings = new Dictionary<string, string>
			{
				{ "==", "EQUAL" },
				{ "<", "LESS_THAN" },
				{ "<=", "LESS_THAN_OR_EQUAL" },
				{ ">", "GREATER_THAN" },
				{ ">=", "GREATER_THAN_OR_EQUAL	" }
			};

			return mappings.ContainsKey(op) ? mappings[op] : "OPERATION_UNSPECIFIED";
		}

		string GetStringOperatorCode(string op)
		{
			var mappings = new Dictionary<string, string>
			{
				{ "==", "EXACT" },
				{ "^=", "BEGINS_WITH" },
				{ "$=", "ENDS_WITH" },
				{ "=@", "CONTAINS" },
				{ "=~", "FULL_REGEXP" },
				{ "~", "PARTIAL_REGEXP" },
			};

			return mappings.ContainsKey(op) ? mappings[op] : "MATCH_TYPE_UNSPECIFIED";
		}

		object GetDateRanges() {
			return new Dictionary<string, string>
			{
				{ "startDate", (((DateTimeOffset)Model.DateInterval.StartDate).ToString("yyyy-MM-dd")) },
				{ "endDate", (((DateTimeOffset)Model.DateInterval.EndDate).ToString("yyyy-MM-dd")) },
				{ "name", "period" }
			};
		}
	]]>
	</RazorFunctions>

</Suite>