<?xml version="1.0" encoding="utf-8" ?>
<Suite Category="SEO" RequireVersion="9.0" Title="Serpstat" Id="Serpstat" SourceUrl="https://github.com/nielsbosma/SeoTools-for-Excel-Connectors/blob/master/Serpstat.xml" HelpUrl="http://seotoolsforexcel.com/Serpstat/" HelpText="Documentation">

  <Author Name="Victor" Url="http://community.seotoolsforexcel.com/users/diskborste/activity"/>

  <Settings HelpText="What's this?" HelpUrl="http://seotoolsforexcel.com/Serpstat/">
    <Text Id="Key" Title="API Key" Required="true"/>
  </Settings>

  <Resources>
    <Resource Id="SelectEngine">
      <Select Id="Engine" Title="Google Engine" Required="true" DefaultValue="g_us">
        <DataSource>
					<Item Id="g_af" Title="Afghanistan"/>
					<Item Id="g_al" Title="Albania"/>
					<Item Id="g_dz" Title="Algeria"/>
					<Item Id="g_as" Title="American Samoa"/>
					<Item Id="g_ad" Title="Andorra"/>
					<Item Id="g_ao" Title="Angola"/>
					<Item Id="g_ai" Title="Anguilla"/>
					<Item Id="g_ag" Title="Antigua and Barbuda"/>
					<Item Id="g_ar" Title="Argentina"/>
					<Item Id="g_am" Title="Armenia"/>
					<Item Id="g_aw" Title="Aruba"/>
					<Item Id="g_au" Title="Australia"/>
					<Item Id="g_at" Title="Austria"/>
					<Item Id="g_az" Title="Azerbaijan"/>
					<Item Id="g_bh" Title="Bahrain"/>
					<Item Id="g_bd" Title="Bangladesh"/>
					<Item Id="g_bb" Title="Barbados"/>
					<Item Id="g_by" Title="Belarus"/>
					<Item Id="g_be" Title="Belgium"/>
					<Item Id="g_bz" Title="Belize"/>
					<Item Id="g_bj" Title="Benin"/>
					<Item Id="g_bm" Title="Bermuda"/>
					<Item Id="g_bt" Title="Bhutan"/>
					<Item Id="g_bo" Title="Bolivia"/>
					<Item Id="g_ba" Title="Bosnia and Herzegovina"/>
					<Item Id="g_bw" Title="Botswana"/>
					<Item Id="g_br" Title="Brazil"/>
					<Item Id="g_io" Title="British Indian Ocean Territory"/>
					<Item Id="g_vg" Title="British Virgin Islands"/>
					<Item Id="g_bn" Title="Brunei"/>
					<Item Id="g_bg" Title="Bulgaria"/>
					<Item Id="g_bf" Title="Burkina Faso"/>
					<Item Id="g_bi" Title="Burundi"/>
					<Item Id="g_kh" Title="Cambodia"/>
					<Item Id="g_cm" Title="Cameroon"/>
					<Item Id="g_ca" Title="Canada"/>
					<Item Id="g_cv" Title="Cape Verde"/>
					<Item Id="g_ky" Title="Cayman Islands"/>
					<Item Id="g_cf" Title="Central African Republic"/>
					<Item Id="g_td" Title="Chad"/>
					<Item Id="g_cl" Title="Chile"/>
					<Item Id="g_cn" Title="China"/>
					<Item Id="g_cx" Title="Christmas Island"/>
					<Item Id="g_сс" Title="Cocos (Keeling) Islands"/>
					<Item Id="g_co" Title="Colombia"/>
					<Item Id="g_km" Title="Comoros"/>
					<Item Id="g_ck" Title="Cook Islands"/>
					<Item Id="g_cr" Title="Costa Rica"/>
					<Item Id="g_ci" Title="Cote d'Ivoire"/>
					<Item Id="g_hr" Title="Croatia"/>
					<Item Id="g_cw" Title="Curacao"/>
					<Item Id="g_cy" Title="Cyprus"/>
					<Item Id="g_cz" Title="Czech Republic"/>
					<Item Id="g_cd" Title="Democratic Republic of the Congo"/>
					<Item Id="g_dk" Title="Denmark"/>
					<Item Id="g_dj" Title="Djibouti"/>
					<Item Id="g_dm" Title="Dominica"/>
					<Item Id="g_do" Title="Dominican Republic"/>
					<Item Id="g_ec" Title="Ecuador"/>
					<Item Id="g_eg" Title="Egypt"/>
					<Item Id="g_sv" Title="El Salvador"/>
					<Item Id="g_gq" Title="Equatorial Guinea"/>
					<Item Id="g_er" Title="Eritrea"/>
					<Item Id="g_ee" Title="Estonia"/>
					<Item Id="g_et" Title="Ethiopia"/>
					<Item Id="g_fk" Title="Falkland Islands (Islas Malvinas)"/>
					<Item Id="g_fo" Title="Faroe Islands"/>
					<Item Id="g_fm" Title="Federated States of Micronesia"/>
					<Item Id="g_fj" Title="Fiji"/>
					<Item Id="g_fi" Title="Finland"/>
					<Item Id="g_fr" Title="France"/>
					<Item Id="g_gf" Title="French Guiana"/>
					<Item Id="g_pf" Title="French Polynesia"/>
					<Item Id="g_ga" Title="Gabon"/>
					<Item Id="g_ge" Title="Georgia"/>
					<Item Id="g_de" Title="Germany"/>
					<Item Id="g_gh" Title="Ghana"/>
					<Item Id="g_gi" Title="Gibraltar"/>
					<Item Id="g_gr" Title="Greece"/>
					<Item Id="g_gl" Title="Greenland"/>
					<Item Id="g_gd" Title="Grenada"/>
					<Item Id="g_gp" Title="Guadeloupe"/>
					<Item Id="g_gu" Title="Guam"/>
					<Item Id="g_gt" Title="Guatemala"/>
					<Item Id="g_gg" Title="Guernsey"/>
					<Item Id="g_gn" Title="Guinea"/>
					<Item Id="g_gw" Title="Guinea-Bissau"/>
					<Item Id="g_gy" Title="Guyana"/>
					<Item Id="g_ht" Title="Haiti"/>
					<Item Id="g_hn" Title="Honduras"/>
					<Item Id="g_hk" Title="Hong Kong"/>
					<Item Id="g_hu" Title="Hungary"/>
					<Item Id="g_is" Title="Iceland"/>
					<Item Id="g_in" Title="India"/>
					<Item Id="g_id" Title="Indonesia"/>
					<Item Id="g_iq" Title="Iraq"/>
					<Item Id="g_ie" Title="Ireland"/>
					<Item Id="g_im" Title="Isle of Man"/>
					<Item Id="g_il" Title="Israel"/>
					<Item Id="g_it" Title="Italy"/>
					<Item Id="g_jm" Title="Jamaica"/>
					<Item Id="g_jp" Title="Japan"/>
					<Item Id="g_je" Title="Jersey"/>
					<Item Id="g_jo" Title="Jordan"/>
					<Item Id="g_kz" Title="Kazakhstan"/>
					<Item Id="g_ke" Title="Kenya"/>
					<Item Id="g_ki" Title="Kiribati"/>
					<Item Id="g_kw" Title="Kuwait"/>
					<Item Id="g_kg" Title="Kyrgyzstan"/>
					<Item Id="g_la" Title="Laos"/>
					<Item Id="g_lv" Title="Latvia"/>
					<Item Id="g_lb" Title="Lebanon"/>
					<Item Id="g_ls" Title="Lesotho"/>
					<Item Id="g_lr" Title="Liberia"/>
					<Item Id="g_ly" Title="Libya"/>
					<Item Id="g_li" Title="Liechtenstein"/>
					<Item Id="g_lt" Title="Lithuania"/>
					<Item Id="g_lu" Title="Luxembourg"/>
					<Item Id="g_mo" Title="Macau"/>
					<Item Id="g_mk" Title="Macedonia (FYROM)"/>
					<Item Id="g_mg" Title="Madagascar"/>
					<Item Id="g_mw" Title="Malawi"/>
					<Item Id="g_my" Title="Malaysia"/>
					<Item Id="g_mv" Title="Maldives"/>
					<Item Id="g_ml" Title="Mali"/>
					<Item Id="g_mt" Title="Malta"/>
					<Item Id="g_mh" Title="Marshall Islands"/>
					<Item Id="g_mq" Title="Martinique"/>
					<Item Id="g_mr" Title="Mauritania"/>
					<Item Id="g_mu" Title="Mauritius"/>
					<Item Id="g_yt" Title="Mayotte"/>
					<Item Id="g_mx" Title="Mexico"/>
					<Item Id="g_md" Title="Moldova"/>
					<Item Id="g_mc" Title="Monaco"/>
					<Item Id="g_mn" Title="Mongolia"/>
					<Item Id="g_me" Title="Montenegro"/>
					<Item Id="g_ms" Title="Montserrat"/>
					<Item Id="g_ma" Title="Morocco"/>
					<Item Id="g_mz" Title="Mozambique"/>
					<Item Id="g_mm" Title="Myanmar (Burma)"/>
					<Item Id="g_na" Title="Namibia"/>
					<Item Id="g_nr" Title="Nauru"/>
					<Item Id="g_np" Title="Nepal"/>
					<Item Id="g_nl" Title="Netherlands"/>
					<Item Id="g_nc" Title="New Caledonia"/>
					<Item Id="g_nz" Title="New Zealand"/>
					<Item Id="g_ni" Title="Nicaragua"/>
					<Item Id="g_ne" Title="Niger"/>
					<Item Id="g_ng" Title="Nigeria"/>
					<Item Id="g_nu" Title="Niue"/>
					<Item Id="g_nf" Title="Norfolk Island"/>
					<Item Id="g_mp" Title="Northern Mariana Islands"/>
					<Item Id="g_no" Title="Norway"/>
					<Item Id="g_om" Title="Oman"/>
					<Item Id="g_pk" Title="Pakistan"/>
					<Item Id="g_pw" Title="Palau"/>
					<Item Id="g_ps" Title="Palestine"/>
					<Item Id="g_pa" Title="Panama"/>
					<Item Id="g_pg" Title="Papua New Guinea"/>
					<Item Id="g_py" Title="Paraguay"/>
					<Item Id="g_pe" Title="Peru"/>
					<Item Id="g_ph" Title="Philippines"/>
					<Item Id="g_pn" Title="Pitcairn Islands"/>
					<Item Id="g_pl" Title="Poland"/>
					<Item Id="g_pt" Title="Portugal"/>
					<Item Id="g_pr" Title="Puerto Rico"/>
					<Item Id="g_qa" Title="Qatar"/>
					<Item Id="g_cg" Title="Republic of the Congo"/>
					<Item Id="g_re" Title="Reunion"/>
					<Item Id="g_ro" Title="Romania"/>
					<Item Id="g_ru" Title="Russia"/>
					<Item Id="g_rw" Title="Rwanda"/>
					<Item Id="g_sh" Title="Saint Helena, Ascension and Tristan da Cunha"/>
					<Item Id="g_kn" Title="Saint Kitts and Nevis"/>
					<Item Id="g_lc" Title="Saint Lucia"/>
					<Item Id="g_pm" Title="Saint Pierre and Miquelon"/>
					<Item Id="g_vc" Title="Saint Vincent and Grenadines"/>
					<Item Id="g_ws" Title="Samoa"/>
					<Item Id="g_sm" Title="San Marino"/>
					<Item Id="g_st" Title="Sao Tome and Principe"/>
					<Item Id="g_sa" Title="Saudi Arabia"/>
					<Item Id="g_sn" Title="Senegal"/>
					<Item Id="g_rs" Title="Serbia"/>
					<Item Id="g_sc" Title="Seychelles"/>
					<Item Id="g_sl" Title="Sierra Leone"/>
					<Item Id="g_sg" Title="Singapore"/>
					<Item Id="g_sx" Title="Sint Maarten"/>
					<Item Id="g_sk" Title="Slovakia"/>
					<Item Id="g_si" Title="Slovenia"/>
					<Item Id="g_sb" Title="Solomon Islands"/>
					<Item Id="g_so" Title="Somalia"/>
					<Item Id="g_za" Title="South Africa"/>
					<Item Id="g_kr" Title="South Korea"/>
					<Item Id="g_es" Title="Spain"/>
					<Item Id="g_lk" Title="Sri Lanka"/>
					<Item Id="g_sr" Title="Suriname"/>
					<Item Id="g_sz" Title="Swaziland"/>
					<Item Id="g_se" Title="Sweden"/>
					<Item Id="g_ch" Title="Switzerland"/>
					<Item Id="g_tw" Title="Taiwan"/>
					<Item Id="g_tj" Title="Tajikistan"/>
					<Item Id="g_tz" Title="Tanzania"/>
					<Item Id="g_th" Title="Thailand"/>
					<Item Id="g_bs" Title="The Bahamas"/>
					<Item Id="g_gm" Title="The Gambia"/>
					<Item Id="g_tl" Title="Timor-Leste"/>
					<Item Id="g_tg" Title="Togo"/>
					<Item Id="g_tk" Title="Tokelau"/>
					<Item Id="g_to" Title="Tonga"/>
					<Item Id="g_tt" Title="Trinidad and Tobago"/>
					<Item Id="g_tn" Title="Tunisia"/>
					<Item Id="g_tr" Title="Turkey"/>
					<Item Id="g_tm" Title="Turkmenistan"/>
					<Item Id="g_tc" Title="Turks and Caicos Islands"/>
					<Item Id="g_tv" Title="Tuvalu"/>
					<Item Id="g_vi" Title="U.S. Virgin Islands"/>
					<Item Id="g_ug" Title="Uganda"/>
					<Item Id="g_ua" Title="Ukraine"/>
					<Item Id="g_ae" Title="United Arab Emirates"/>
					<Item Id="g_uk" Title="United Kingdom"/>
					<Item Id="g_us" Title="United States"/>
					<Item Id="g_uy" Title="Uruguay"/>
					<Item Id="g_uz" Title="Uzbekistan"/>
					<Item Id="g_vu" Title="Vanuatu"/>
					<Item Id="g_va" Title="Vatican City"/>
					<Item Id="g_ve" Title="Venezuela"/>
					<Item Id="g_vn" Title="Vietnam"/>
					<Item Id="g_wf" Title="Wallis and Futuna"/>
					<Item Id="g_ye" Title="Yemen"/>
					<Item Id="g_zm" Title="Zambia"/>
					<Item Id="g_zw" Title="Zimbabwe"/>
        </DataSource>
      </Select>
    </Resource>
    <Resource Id="Fail">
			<Fail>
				<JsonPath Expr="$.error.message"/>
				<JsonPath Expr="$.status_msg" Id="Denied" Fail.If="IsEqual" Fail.ComparedTo="Api not allowed for your plan!" Fail.Action="Message" Fail.Message="Api not allowed for your plan!"/>
			</Fail>
    </Resource>
    <Resource Id="Fetch.Url">
      <Fetch.Url>
        <![CDATA[
        https://api.serpstat.com/v4?token=@Model.Key
        ]]>
      </Fetch.Url>
    </Resource>
  </Resources>

  <RestConnector Id="DomainSummary" Title="Domain Summary" Group="Domain Analysis" HelpText="This report provides you with the number of keywords domain uses in SEO and PPC, shows its online visibility and other metrics." HelpUrl="https://serpstat.com/api/412-summarnij-otchet-po-domenu-v4-serpstatdomainproceduregetdomainsinfo/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="apple.com" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
    <Paging PageSize="100"/>
    <Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("domain", Model.Domain);
					parameters.Add("se", Model.Engine );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatDomainProcedure.getDomainsInfo");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[0]">
				<JsonPath Expr="domain" Id="Domain" Title="Domain" Converter="String"/>
				<JsonPath Expr="visible" Id="Visible" Title="Visible" Converter="Double"/>
				<JsonPath Expr="keywords" Id="Keywords" Title="Keywords" Converter="Int"/>
				<JsonPath Expr="traff" Id="Traffic" Title="Traffic" Converter="String"/>
				<JsonPath Expr="visible_dynamic" Id="VisibleDynamic" Title="Visible Dynamic" Converter="Double"/>
				<JsonPath Expr="traff_dynamic" Id="TrafficDynamic" Title="Traffic Dynamic" Converter="Int"/>
				<JsonPath Expr="ads_dynamic" Id="AdsDynamic" Title="Ads Dynamic" Converter="Int"/>
				<JsonPath Expr="new_keywords" Id="NewKeywords" Title="New Keywords" Converter="Int"/>
				<JsonPath Expr="rised_keywords" Id="RisedKeywords" Title="Rised Keywords" Converter="Int"/>
				<JsonPath Expr="down_keywords" Id="DownKeywords" Title="Down Keywords" Converter="Int"/>
				<JsonPath Expr="ad_keywords" Id="AdKeywords" Title="Ad Keywords" Converter="Int"/>
				<JsonPath Expr="ads" Id="Ads" Title="Ads" Converter="Int"/>
				<JsonPath Expr="prev_date" Id="PreviousDate" Title="PreviousDate" Converter="DateTime"/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="DomainHistory" Title="Domain History" Group="Domain Analysis" HelpText="This report provides you with the historical data on a domain’s number of keywords and visibility." HelpUrl="https://serpstat.com/api/420-istoriya-po-domenu-v4-serpstatdomainproceduregetdomainshistory/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="apple.com" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
    <Paging PageSize="100"/>
    <Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("domain", Model.Domain);
					parameters.Add("se", Model.Engine );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatDomainProcedure.getDomainsHistory");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
      <Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
				<JsonPath Expr="date" Id="Date" Title="Date" Converter="DateTime"/>
				<JsonPath Expr="domain" Id="Domain" Title="Domain" Converter="String"/>
				<JsonPath Expr="keywords" Id="Keywords" Title="Keywords" Converter="Int"/>
				<JsonPath Expr="traff" Id="Traffic" Title="Traffic" Converter="String"/>
				<JsonPath Expr="visible" Id="Visible" Title="Visible" Converter="Double"/>
				<JsonPath Expr="visible_static" Id="VisibleStatic" Title="Visible Static" Converter="Double"/>
				<JsonPath Expr="new_keywords" Id="NewKeywords" Title="New Keywords" Converter="Int"/>
				<JsonPath Expr="out_keywords" Id="OutKeywords" Title="Out Keywords" Converter="Int"/>
				<JsonPath Expr="rised_keywords" Id="RisedKeywords" Title="Rised Keywords" Converter="Int"/>
				<JsonPath Expr="down_keywords" Id="DownKeywords" Title="Down Keywords" Converter="Int"/>
				<JsonPath Expr="ad_keywords" Id="AdKeywords" Title="Ad Keywords" Converter="Int"/>
				<JsonPath Expr="ads" Id="Ads" Title="Ads" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="DomainKeywords" Title="Domain Keywords" Group="Domain Analysis" HelpText="This report shows keywords a domain ranks for in Google top 100 search results." HelpUrl="https://serpstat.com/api/584-top-search-engine-keywords-by-v4-domain-serpstatdomainproceduregetdomainkeywords/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="imdb.com" Required="true"/>
      <Resource Id="SelectEngine"/>
			<Checkbox Id="WithSubdomains" Title="With Subdomains"/>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("domain", Model.Domain);
					parameters.Add("se", Model.Engine );
					parameters.Add("withSubdomains", Model.WithSubdomains );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatDomainProcedure.getDomainKeywords");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
        <JsonPath Expr="domain" Id="Domain" Title="Domain" Converter="String"/>
        <JsonPath Expr="subdomain" Id="Subdomain" Title="Subdomain" Converter="String"/>
        <JsonPath Expr="keyword" Id="Keyword" Title="Keyword" Converter="String"/>
        <JsonPath Expr="keyword_length" Id="KeywordLength" Title="Keyword Length" Converter="Int"/>
        <JsonPath Expr="url" Id="Url" Title="URL" Converter="String"/>
        <JsonPath Expr="position" Id="Position" Title="Position" Converter="Int"/>
        <JsonPath Expr="found_results" Id="FoundResults" Title="Results Found" Converter="Int"/>
        <JsonPath Expr="cost" Id="Cost" Title="Cost" Converter="Double"/>
        <JsonPath Expr="concurrency" Id="Concurrency" Title="Concurrency" Converter="Auto"/>
        <JsonPath Expr="region_queries_count" Id="QueriesCount" Title="Queries Count" Converter="Int"/>
        <JsonPath Expr="traff" Id="Traffic" Title="Traffic" Converter="Int"/>
        <JsonPath Expr="difficulty" Id="Difficulty" Title="Difficulty" Converter="Double"/>
        <JsonPath Expr="dynamic" Id="Dynamic" Title="Dynamic" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="CompetitorsPaidSearchByDomain" Title="Competitors in Paid Search by Domain" Group="Domain Analysis" HelpText="Performs list of competitors in PPC for the given keyword." HelpUrl="https://serpstat.com/api/698-serpstatkeywordproceduregetadscompetitors/">
    <Parameters>
      <Text Id="Query" Title="Query" Debug.DefaultValue="pokemon go" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("query", Model.Query);
					parameters.Add("se", Model.Engine );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatKeywordProcedure.getAdsCompetitors");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
        <JsonPath Expr="domain" Id="Domain" Title="Domain" Converter="String"/>
        <JsonPath Expr="ads" Id="Ads" Title="Ads" Converter="Int"/>
        <JsonPath Expr="all" Id="All" Title="All" Converter="Int"/>
        <JsonPath Expr="common" Id="Common" Title="Common" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="TopPagesByDomain" Title="Top Pages by Domain" Group="Domain Analysis" HelpText="Returns website pages in hierarchical order. Also, it shows the number of keywords from Google top-100 for each URL, approximate traffic of the page and Facebook shares." HelpUrl="https://serpstat.com/api/588-domain-top-urls-v4-serpstatdomainproceduregettopurls/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="imdb.com" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("domain", Model.Domain);
					parameters.Add("se", Model.Engine );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatDomainProcedure.getTopUrls");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
        <JsonPath Expr="url" Id="Url" Title="URL" Converter="String"/>
        <JsonPath Expr="organic_keywords" Id="OrganicKeywords" Title="Organic Keywords" Converter="Int"/>
        <JsonPath Expr="facebook_shares" Id="FacebookShares" Title="Facebook Shares" Converter="Int"/>
        <JsonPath Expr="potencial_traff" Id="PotentialTraffic" Title="Potential Traffic" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="CompetitorsOrganicSearchByDomain" Title="Competitors in Organic Search by Domain" Group="Domain Analysis" HelpText="Brings in the list of domain competitors in top 20 Google search results." HelpUrl="https://serpstat.com/api/590-domain-competitors-in-v4-search-result-serpstatdomainproceduregetcompetitors/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="imdb.com" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("domain", Model.Domain);
					parameters.Add("se", Model.Engine );

					var dict = GetPostBody(parameters, "SerpstatDomainProcedure.getCompetitors");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
        <JsonPath Expr="domain" Id="Domain" Title="Domain" Converter="String"/>
				<JsonPath Expr="visible" Id="Visibility" Title="Visibility" Converter="Double"/>
				<JsonPath Expr="keywords" Id="Keywords" Title="Keywords" Converter="Int"/>
        <JsonPath Expr="traff" Id="Traffic" Title="Traffic" Converter="Int"/>
				<JsonPath Expr="visible_dynamic" Id="VisibilityDynamic" Title="Visibility Dynamic" Converter="Double"/>
				<JsonPath Expr="keywords_dynamic" Id="KeywordsDynamic" Title="Keywords Dynamic" Converter="Int"/>
        <JsonPath Expr="traff_dynamic" Id="TrafficDynamic" Title="Traffic Dynamic" Converter="Int"/>
        <JsonPath Expr="ads_dynamic" Id="AdsDynamic" Title="Ads Dynamic" Converter="Int"/>
        <JsonPath Expr="new_keywords" Id="NewKeywords" Title="New Keywords" Converter="Int"/>
        <JsonPath Expr="out_keywords" Id="OutKeywords" Title="Out Keywords" Converter="Int"/>
        <JsonPath Expr="rised_keywords" Id="RisedKeywords" Title="Rised Keywords" Converter="Int"/>
        <JsonPath Expr="down_keywords" Id="DownKeywords" Title="Down Keywords" Converter="Int"/>
        <JsonPath Expr="ad_keywords" Id="AdKeywords" Title="Ad Keywords" Converter="Int"/>
        <JsonPath Expr="ads" Id="Ads" Title="Ads" Converter="Int"/>
        <JsonPath Expr="intersected" Id="Intersected" Title="Intersected" Converter="Int"/>
        <JsonPath Expr="common" Id="Common" Title="Common" Converter="Int"/>
        <JsonPath Expr="relevance" Id="Relevance" Title="Relevance" Converter="Int"/>
        <JsonPath Expr="new_relevance" Id="NewRelevance" Title="New Relevance" Converter="Int"/>
        <JsonPath Expr="our_relevance" Id="OurRelevance" Title="Our Relevance" Converter="Int"/>
        <JsonPath Expr="missing" Id="Missing" Title="Missing" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="DomainAds" Title="Domain Ads" Group="Domain Analysis" HelpText="Returns paid keywords and ads copies that pop up for the queried domain in paid search results." HelpUrl="https://serpstat.com/api/418-otchet-po-reklame-s-ukazannim-imenem-domena-v4-serpstatdomainproceduregetadkeywords/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="imdb.com" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("domain", Model.Domain);
					parameters.Add("se", Model.Engine );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatDomainProcedure.getAdKeywords");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
        <JsonPath Expr="keyword" Id="Keyword" Title="Keyword" Converter="String"/>
        <JsonPath Expr="keyword_length" Id="KeywordLength" Title="Keyword Length" Converter="Int"/>
        <JsonPath Expr="domain" Id="Domain" Title="Domain" Converter="String"/>
        <JsonPath Expr="subdomain" Id="Subdomain" Title="Subdomain" Converter="String"/>
        <JsonPath Expr="url" Id="Url" Title="URL" Converter="String"/>
        <JsonPath Expr="title" Id="Title" Title="Title" Converter="String"/>
        <JsonPath Expr="text" Id="Text" Title="Text" Converter="String"/>
        <JsonPath Expr="position" Id="Position" Title="Position" Converter="Int"/>
        <JsonPath Expr="type" Id="Type" Title="Type" Converter="Auto"/>
        <JsonPath Expr="cost" Id="Cost" Title="Cost" Converter="Double"/>
        <JsonPath Expr="concurrency" Id="Concurrency" Title="Concurrency" Converter="Auto"/>
        <JsonPath Expr="found_results" Id="FoundResults" Title="Results Found" Converter="Int"/>
        <JsonPath Expr="region_queries_count" Id="QueriesCount" Title="Queries Count" Converter="Int"/>
        <JsonPath Expr="difficulty" Id="Difficulty" Title="Difficulty" Converter="Double"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="DomainUrls" Title="Domain URLs" Group="Domain Analysis" HelpText="Returns the list of URLs within the analyzed domain and the number of keywords for each URL." HelpUrl="https://serpstat.com/api/586-list-of-domain-urls-v4-serpstatdomainproceduregetdomainurls/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="imdb.com" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("domain", Model.Domain);
					parameters.Add("se", Model.Engine );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatDomainProcedure.getDomainUrls");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
        <JsonPath Expr="url" Id="Url" Title="URL" Converter="String"/>
				<JsonPath Expr="keywords" Id="Keywords" Title="Keywords" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="DomainTrafficSerpstatDb" Title="Domain Traffic in Serpstat Databases" Group="Domain Analysis" HelpText="Returns an array with information about the amount of traffic by domain in Serpstat databases." HelpUrl="https://serpstat.com/api/information-on-traffic-by-domain-databases/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="imdb.com" Required="true"/>
    </Parameters>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("domain", Model.Domain);

					var dict = GetPostBody(parameters, "SerpstatDomainProcedure.getAllRegionsTraffic");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data.*">
				<JsonPath Expr="google_domain" Id="GoogleDomain" Title="Google Domain" Converter="String"/>
        <JsonPath Expr="country_name_en" Id="CountryName" Title="Country Name" Converter="String"/>
				<JsonPath Expr="region" Id="Region" Title="Region" Converter="String"/>
				<JsonPath Expr="traff" Id="Traffic" Title="Traffic" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="DomainKeywordsSerpstatDb" Title="Domain Keywords in Serpstat Databases" Group="Domain Analysis" HelpText="Returns an array with information about the amount of keywords by domain in Serpstat databases." HelpUrl="https://serpstat.com/api/sorting-the-domain-by-keywords/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="imdb.com" Required="true"/>
    </Parameters>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("domain", Model.Domain);

					var dict = GetPostBody(parameters, "SerpstatDomainProcedure.getRegionsCount");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
				<JsonPath Expr="domain" Id="Domain" Title="Domain" Converter="String"/>
        <JsonPath Expr="country_name_en" Id="CountryName" Title="Country Name" Converter="String"/>
				<JsonPath Expr="db_name" Id="Database" Title="Database" Converter="String"/>
				<JsonPath Expr="keywords_count" Id="Keywords" Title="Keywords" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="KeywordOverview" Title="Keyword Overview" Group="Keyword Research" HelpText="Provides you with the keyword overview showing its volume, CPC, level of competition, etc." HelpUrl="https://serpstat.com/api/27-keyword-reports/">
    <Parameters>
      <Text Id="Keywords" Title="Keywords" Debug.DefaultValue="imdb.com" Required="true" Multiline="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("se", Model.Engine );
					parameters.Add("keywords", ((string)Model.Keywords).Trim().Split('\n')
						.Select(e => e.Trim())
						.Where(e => !string.IsNullOrEmpty(e))
						.ToArray());

					var dict = GetPostBody(parameters, "SerpstatKeywordProcedure.getKeywordsInfo");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
        <JsonPath Expr="keyword" Id="Keyword" Title="Keyword" Converter="String"/>
        <JsonPath Expr="found_results" Id="FoundResults" Title="Results Found" Converter="Int"/>
        <JsonPath Expr="region_queries_count" Id="QueriesCount" Title="Queries Count" Converter="Int"/>
        <JsonPath Expr="region_queries_count_wide" Id="QueriesCountWide" Title="Queries Count Wide" Converter="Int"/>
        <JsonPath Expr="cost" Id="Cost" Title="Cost" Converter="Double"/>
        <JsonPath Expr="concurrency" Id="Concurrency" Title="Concurrency" Converter="Auto"/>
        <JsonPath Expr="suggestions_count" Id="Suggestions" Title="Suggestions" Converter="Int"/>
        <JsonPath Expr="keywords_count" Id="Keywords" Title="Keywords" Converter="Int"/>
        <JsonPath Expr="lang" Id="Lang" Title="Lang" Converter="String"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="KeywordsSelection" Title="Keywords Selection" Group="Keyword Research" HelpText="Shows organic keywords associated with the researched keyword that domains are ranking for in Google`s top-100 results and for every found keyword you’ll see its volume, CPC and level of competition." HelpUrl="https://serpstat.com/api/592-keywords-for-v4-words-serpstatkeywordproceduregetkeywords/">
    <Parameters>
      <Text Id="Keyword" Title="Keyword" Debug.DefaultValue="tesla" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("se", Model.Engine );
					parameters.Add("keyword", Model.Keyword);

					var dict = GetPostBody(parameters, "SerpstatKeywordProcedure.getKeywords");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
        <JsonPath Expr="keyword" Id="Keyword" Title="Keyword" Converter="String"/>
        <JsonPath Expr="found_results" Id="FoundResults" Title="Results Found" Converter="Int"/>
        <JsonPath Expr="region_queries_count" Id="QueriesCount" Title="Queries Count" Converter="Int"/>
        <JsonPath Expr="region_queries_count_wide" Id="QueriesCountWide" Title="Queries Count Wide" Converter="Int"/>
        <JsonPath Expr="cost" Id="Cost" Title="Cost" Converter="Double"/>
        <JsonPath Expr="concurrency" Id="Concurrency" Title="Concurrency" Converter="Auto"/>
        <JsonPath Expr="difficulty" Id="Difficulty" Title="Difficulty" Converter="Double"/>
        <JsonPath Expr="lang" Id="Lang" Title="Lang" Converter="String"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="SearchSuggestions" Title="Search Suggestions" Group="Keyword Research" HelpText="Shows search suggestions for the keyword you requested (they are found by the full-text search)." HelpUrl="https://serpstat.com/api/594-v4-search-suggestions-on-v4-keyword-serpstatkeywordproceduregetsuggestions/">
    <Parameters>
      <Text Id="Keyword" Title="Keyword" Debug.DefaultValue="tesla" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("se", Model.Engine );
					parameters.Add("keyword", Model.Keyword);
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatKeywordProcedure.getSuggestions");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
        <JsonPath Expr="keyword" Id="Keyword" Title="Keyword" Converter="String"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="RelatedKeywords" Title="Related Keywords" Group="Keyword Research" HelpText="Shows all search queries that are semantically related to the searched keyword." HelpUrl="https://serpstat.com/api/596-related-keywords-v4-serpstatkeywordproceduregetrelatedkeywords/">
    <Parameters>
      <Text Id="Keyword" Title="Keyword" Debug.DefaultValue="tesla" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("se", Model.Engine );
					parameters.Add("keyword", Model.Keyword);
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatKeywordProcedure.getRelatedKeywords");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
        <JsonPath Expr="keyword" Id="Keyword" Title="Keyword" Converter="String"/>
        <JsonPath Expr="cost" Id="Cost" Title="Cost" Converter="Double"/>
        <JsonPath Expr="concurrency" Id="Concurrency" Title="Concurrency" Converter="Auto"/>
        <JsonPath Expr="difficulty" Id="Difficulty" Title="Difficulty" Converter="Double"/>
        <JsonPath Expr="weight" Id="Weight" Title="Weight" Converter="Int"/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="TopByKeyword" Title="Top by Keyword" Group="Keyword Research" HelpText="Shows you Google's top-100 search results for the analyzed keyword." HelpUrl="https://serpstat.com/api/598-keyword-top-v4-serpstatkeywordproceduregetkeywordtop/">
    <Parameters>
      <Text Id="Keyword" Title="Keyword" Debug.DefaultValue="tesla" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("se", Model.Engine );
					parameters.Add("keyword", Model.Keyword);

					var dict = GetPostBody(parameters, "SerpstatKeywordProcedure.getKeywordTop");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data.top[*]">
        <JsonPath Expr="position" Id="Position" Title="Position" Converter="Int"/>
        <JsonPath Expr="url" Id="Url" Title="URL" Converter="String"/>
        <JsonPath Expr="domain" Id="Domain" Title="Domain" Converter="String"/>
        <JsonPath Expr="subdomain" Id="Subdomain" Title="Subdomain" Converter="String"/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="CompetitorsOrganicSearchByKeyword" Title="Competitors in Organic Search by Keyword" Group="Keyword Research" HelpText="Lists the domains that rank for the given keyword in Google top-20 results." HelpUrl="https://serpstat.com/api/608-keyword-competitors-v4-serpstatkeywordproceduregetcompetitors/">
    <Parameters>
      <Text Id="Keyword" Title="Keyword" Debug.DefaultValue="tesla" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("keyword", Model.Keyword);
					parameters.Add("se", Model.Engine );

					var dict = GetPostBody(parameters, "SerpstatKeywordProcedure.getCompetitors");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data.*">
        <JsonPath Expr="domain" Id="Domain" Title="Domain" Converter="String"/>
				<JsonPath Expr="visible" Id="Visibility" Title="Visibility" Converter="Double"/>
				<JsonPath Expr="keywords" Id="Keywords" Title="Keywords" Converter="Int"/>
        <JsonPath Expr="traff" Id="Traffic" Title="Traffic" Converter="Int"/>
				<JsonPath Expr="visible_dynamic" Id="VisibilityDynamic" Title="Visibility Dynamic" Converter="Double"/>
				<JsonPath Expr="keywords_dynamic" Id="KeywordsDynamic" Title="Keywords Dynamic" Converter="Int"/>
        <JsonPath Expr="traff_dynamic" Id="TrafficDynamic" Title="Traffic Dynamic" Converter="Int"/>
        <JsonPath Expr="ads_dynamic" Id="AdsDynamic" Title="Ads Dynamic" Converter="Int"/>
        <JsonPath Expr="new_keywords" Id="NewKeywords" Title="New Keywords" Converter="Int"/>
        <JsonPath Expr="out_keywords" Id="OutKeywords" Title="Out Keywords" Converter="Int"/>
        <JsonPath Expr="rised_keywords" Id="RisedKeywords" Title="Rised Keywords" Converter="Int"/>
        <JsonPath Expr="down_keywords" Id="DownKeywords" Title="Down Keywords" Converter="Int"/>
        <JsonPath Expr="ad_keywords" Id="AdKeywords" Title="Ad Keywords" Converter="Int"/>
        <JsonPath Expr="ads" Id="Ads" Title="Ads" Converter="Int"/>
        <JsonPath Expr="intersected" Id="Intersected" Title="Intersected" Converter="Int"/>
        <JsonPath Expr="relevance" Id="Relevance" Title="Relevance" Converter="Int"/>
        <JsonPath Expr="new_relevance" Id="NewRelevance" Title="New Relevance" Converter="Int"/>
        <JsonPath Expr="our_relevance" Id="OurRelevance" Title="Our Relevance" Converter="Int"/>
        <JsonPath Expr="missing" Id="Missing" Title="Missing" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="AdsExamples" Title="Ads Examples" Group="Keyword Research" HelpText="Returns paid keywords and ads copies that pop up for the queried keyword in paid search results." HelpUrl="https://serpstat.com/api/618-keyword-ads-v4-serpstatkeywordproceduregetadkeywords/">
    <Parameters>
      <Text Id="Keyword" Title="Keyword" Debug.DefaultValue="tesla" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("keyword", Model.Keyword);
					parameters.Add("se", Model.Engine );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatKeywordProcedure.getAdKeywords");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
        <JsonPath Expr="keyword" Id="Keyword" Title="Keyword" Converter="String"/>
        <JsonPath Expr="domain" Id="Domain" Title="Domain" Converter="String"/>
        <JsonPath Expr="subdomain" Id="Subdomain" Title="Subdomain" Converter="String"/>
        <JsonPath Expr="url" Id="Url" Title="URL" Converter="String"/>
        <JsonPath Expr="title" Id="Title" Title="Title" Converter="String"/>
        <JsonPath Expr="text" Id="Text" Title="Text" Converter="String"/>
        <JsonPath Expr="position" Id="Position" Title="Position" Converter="Int"/>
        <JsonPath Expr="type" Id="Type" Title="Type" Converter="Auto"/>
        <JsonPath Expr="cost" Id="Cost" Title="Cost" Converter="Double"/>
        <JsonPath Expr="concurrency" Id="Concurrency" Title="Concurrency" Converter="Auto"/>
        <JsonPath Expr="found_results" Id="FoundResults" Title="Results Found" Converter="Int"/>
        <JsonPath Expr="region_queries_count" Id="QueriesCount" Title="Queries Count" Converter="Int"/>
        <JsonPath Expr="difficulty" Id="Difficulty" Title="Difficulty" Converter="Double"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="CompetitorsPaidSearchByKeyword" Title="Competitors in Paid Search by Keyword" Group="Keyword Research" HelpText="Brings in the list of domain competitors in PPC." HelpUrl="https://serpstat.com/api/686-domain-competitors-in-v4-ppc-serpstatdomainproceduregetadscompetitors/">
    <Parameters>
      <Text Id="Keyword" Title="Keyword" Debug.DefaultValue="tesla" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("keyword", Model.Keyword);
					parameters.Add("se", Model.Engine );

					var dict = GetPostBody(parameters, "SerpstatKeywordProcedure.getAdsCompetitors");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
        <JsonPath Expr="domain" Id="Domain" Title="Domain" Converter="String"/>
        <JsonPath Expr="ads" Id="Ads" Title="Ads" Converter="Int"/>
        <JsonPath Expr="all" Id="All" Title="All" Converter="Int"/>
        <JsonPath Expr="common" Id="Common" Title="Common" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="UrlKeywords" Title="URL Keywords" Group="URL Analysis" HelpText="Returns keywords that URL ranks for in Google top-100 search results." HelpUrl="https://serpstat.com/api/614-url-keywords-v4-serpstaturlproceduregeturlkeywords/">
    <Parameters>
      <Text Id="Url" Title="URL" Debug.DefaultValue="https://seotoolsforexcel.com" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("url", Model.Url);
					parameters.Add("se", Model.Engine );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatUrlProcedure.getUrlKeywords");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
        <JsonPath Expr="keyword" Id="Keyword" Title="Keyword" Converter="String"/>
        <JsonPath Expr="domain" Id="Domain" Title="Domain" Converter="String"/>
        <JsonPath Expr="subdomain" Id="Subdomain" Title="Subdomain" Converter="String"/>
        <JsonPath Expr="url" Id="Url" Title="URL" Converter="String"/>
        <JsonPath Expr="position" Id="Position" Title="Position" Converter="Int"/>
        <JsonPath Expr="cost" Id="Cost" Title="Cost" Converter="Double"/>
        <JsonPath Expr="concurrency" Id="Concurrency" Title="Concurrency" Converter="Auto"/>
        <JsonPath Expr="found_results" Id="FoundResults" Title="Results Found" Converter="Int"/>
        <JsonPath Expr="region_queries_count" Id="QueriesCount" Title="Queries Count" Converter="Int"/>
        <JsonPath Expr="traff" Id="Traffic" Title="Traffic" Converter="Int"/>
        <JsonPath Expr="difficulty" Id="Difficulty" Title="Difficulty" Converter="Double"/>
        <JsonPath Expr="dynamic" Id="Dynamic" Title="Dynamic" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="UrlCompetitors" Title="URL Competitors" Group="URL Analysis" HelpText="Returns the list of URL competitors to the queried URL." HelpUrl="https://serpstat.com/api/606-url-lists-competing-with-the-page-v4/">
    <Parameters>
      <Text Id="Url" Title="URL" Debug.DefaultValue="https://seotoolsforexcel.com" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("url", Model.Url);
					parameters.Add("se", Model.Engine );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatUrlProcedure.getUrlCompetitors");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
        <JsonPath Expr="domain" Id="Domain" Title="Domain" Converter="String"/>
        <JsonPath Expr="url" Id="Url" Title="URL" Converter="String"/>
        <JsonPath Expr="cnt" Id="Count" Title="Count" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="MissingKeywords" Title="Missing Keywords" Group="URL Analysis" HelpText="Returns keywords that competitors are ranking for but the given URL isn’t ranking for them." HelpUrl="https://serpstat.com/api/602-competitors-keywords-missing-on-the-specified-page-v4-serpstaturlproceduregeturlmissingkeywords/">
    <Parameters>
      <Text Id="Url" Title="URL" Debug.DefaultValue="https://seotoolsforexcel.com" Required="true"/>
      <Resource Id="SelectEngine"/>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("url", Model.Url);
					parameters.Add("se", Model.Engine );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatUrlProcedure.getUrlMissingKeywords");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
        <JsonPath Expr="keyword" Id="Keyword" Title="Keyword" Converter="String"/>
        <JsonPath Expr="concurrency" Id="Concurrency" Title="Concurrency" Converter="Auto"/>
        <JsonPath Expr="region_queries_count" Id="QueriesCount" Title="Queries Count" Converter="Int"/>
        <JsonPath Expr="region_queries_count_wide" Id="QueriesCountWide" Title="Queries Count Wide" Converter="Int"/>
        <JsonPath Expr="weight" Id="Weight" Title="Weight" Converter="Auto"/>
        <JsonPath Expr="cost" Id="Cost" Title="Cost" Converter="Double"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="SummaryReport" Title="Summary Report" Group="Backlink Analysis" HelpText="Gives you general information about link profile." HelpUrl="https://serpstat.com/api/887-summary-report-getsummaryv2-new-version/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="seotoolsforexcel.com" Required="true"/>
			<Select Id="SearchType" DefaultValue="domain" Required="false">
        <DataSource>
					<Item Id="domain" Title="Domain"/>
          <Item Id="domain_with_subdomains" Title="Domain with Subdomains"/>
        </DataSource>
      </Select>
    </Parameters>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("query", Model.Domain);
					parameters.Add("searchType", Model.SearchType );

					var dict = GetPostBody(parameters, "SerpstatBacklinksProcedure.getSummaryV2");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data">
				<JsonPath Expr="sersptat_domain_rank" Id="sersptat_domain_rank" Converter="Auto"/>
				<JsonPath Expr="referring_domains" Id="referring_domains" Converter="Auto"/>
				<JsonPath Expr="referring_domains_change" Id="referring_domains_change" Converter="Auto"/>
				<JsonPath Expr="redirected_domains" Id="redirected_domains" Converter="Auto"/>
				<JsonPath Expr="referring_malicious_domains" Id="referring_malicious_domains" Converter="Auto"/>
				<JsonPath Expr="referring_malicious_domains_change" Id="referring_malicious_domains_change" Converter="Auto"/>
				<JsonPath Expr="referring_ip_addresses" Id="referring_ip_addresses" Converter="Auto"/>
				<JsonPath Expr="referring_ip_addresses_change" Id="referring_ip_addresses_change" Converter="Auto"/>
				<JsonPath Expr="referring_subnets" Id="referring_subnets" Converter="Auto"/>
				<JsonPath Expr="referring_subnets_change" Id="referring_subnets_change" Converter="Auto"/>
				<JsonPath Expr="backlinks" Id="backlinks" Converter="Auto"/>
				<JsonPath Expr="backlinks_change" Id="backlinks_change" Converter="Auto"/>
				<JsonPath Expr="backlinks_from_mainpages" Id="backlinks_from_mainpages" Converter="Auto"/>
				<JsonPath Expr="backlinks_from_mainpages_change" Id="backlinks_from_mainpages_change" Converter="Auto"/>
				<JsonPath Expr="nofollow_backlinks" Id="nofollow_backlinks" Converter="Auto"/>
				<JsonPath Expr="nofollow_backlinks_change" Id="nofollow_backlinks_change" Converter="Auto"/>
				<JsonPath Expr="dofollow_backlinks" Id="dofollow_backlinks" Converter="Auto"/>
				<JsonPath Expr="dofollow_backlinks_change" Id="dofollow_backlinks_change" Converter="Auto"/>
				<JsonPath Expr="text_backlinks" Id="text_backlinks" Converter="Auto"/>
				<JsonPath Expr="text_backlinks_change" Id="text_backlinks_change" Converter="Auto"/>
				<JsonPath Expr="image_backlinks" Id="image_backlinks" Converter="Auto"/>
				<JsonPath Expr="image_backlinks_change" Id="image_backlinks_change" Converter="Auto"/>
				<JsonPath Expr="redirect_backlinks" Id="redirect_backlinks" Converter="Auto"/>
				<JsonPath Expr="redirect_backlinks_change" Id="redirect_backlinks_change" Converter="Auto"/>
				<JsonPath Expr="canonical_backlinks" Id="canonical_backlinks" Converter="Auto"/>
				<JsonPath Expr="canonical_backlinks_change" Id="canonical_backlinks_change" Converter="Auto"/>
				<JsonPath Expr="alternate_backlinks" Id="alternate_backlinks" Converter="Auto"/>
				<JsonPath Expr="alternate_backlinks_change" Id="alternate_backlinks_change" Converter="Auto"/>
				<JsonPath Expr="rss_backlinks" Id="rss_backlinks" Converter="Auto"/>
				<JsonPath Expr="rss_backlinks_change" Id="rss_backlinks_change" Converter="Auto"/>
				<JsonPath Expr="frame_backlinks" Id="frame_backlinks" Converter="Auto"/>
				<JsonPath Expr="frame_backlinks_change" Id="frame_backlinks_change" Converter="Auto"/>
				<JsonPath Expr="form_backlinks" Id="form_backlinks" Converter="Auto"/>
				<JsonPath Expr="form_backlinks_change" Id="form_backlinks_change" Converter="Auto"/>
				<JsonPath Expr="external_domains" Id="external_domains" Converter="Auto"/>
				<JsonPath Expr="external_domains_change" Id="external_domains_change" Converter="Auto"/>
				<JsonPath Expr="external_malicious_domains" Id="external_malicious_domains" Converter="Auto"/>
				<JsonPath Expr="external_malicious_domains_change" Id="external_malicious_domains_change" Converter="Auto"/>
				<JsonPath Expr="external_links" Id="external_links" Converter="Auto"/>
				<JsonPath Expr="external_links_change" Id="external_links_change" Converter="Auto"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="BacklinksDynamics" Title="Backlinks Dynamics" Group="Backlink Analysis" HelpText="Returns the history of found and lost backlinks for the analyzed site." HelpUrl="https://serpstat.com/api/812-backlinks-dynamics-getbacklinkschangeshistory/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="seotoolsforexcel.com" Required="true"/>
			<Select Id="SearchType" DefaultValue="domain" Required="false">
        <DataSource>
					<Item Id="domain" Title="Domain"/>
          <Item Id="domain_with_subdomains" Title="Domain with Subdomains"/>
        </DataSource>
      </Select>
    </Parameters>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("query", Model.Domain);
					parameters.Add("searchType", Model.SearchType );

					var dict = GetPostBody(parameters, "SerpstatBacklinksProcedure.getBacklinksChangesHistory");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
				<JsonPath Expr="date" Id="Date" Title="Date" Converter="DateTime"/>
				<JsonPath Expr="lost_links" Id="LostLinks" Title="Lost Links" Converter="Int"/>
				<JsonPath Expr="new_links" Id="NewLinks" Title="New Links" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="Top10Anchors" Title="Top 10 Anchors" Group="Backlink Analysis" HelpText="Returns information about the TOP-10 anchors, the number of backlinks with these anchors, and the number of domains on which the referring pages are located." HelpUrl="https://serpstat.com/api/897-top-10-anchors-serpstatbacklinksproceduregettopanchors/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="seotoolsforexcel.com" Required="true"/>
			<Select Id="SearchType" DefaultValue="domain" Required="false">
        <DataSource>
					<Item Id="domain" Title="Domain"/>
          <Item Id="domain_with_subdomains" Title="Domain with Subdomains"/>
        </DataSource>
      </Select>
    </Parameters>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("query", Model.Domain);
					parameters.Add("searchType", Model.SearchType );

					var dict = GetPostBody(parameters, "SerpstatBacklinksProcedure.getTopAnchors");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
				<JsonPath Expr="anchor" Id="Anchor" Title="Anchor" Converter="String"/>
				<JsonPath Expr="backlinks_count" Id="Backlinks" Title="Backlinks" Converter="Int"/>
				<JsonPath Expr="domains_count" Id="Domains" Title="Domains" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="TLDDistribution" Title="TLD Distribution" Group="Backlink Analysis" HelpText="Returns information about the number of domain backlinks that belong to a specific top-level domain zone." HelpUrl="https://serpstat.com/api/899-top-level-domains-tld-distribution-serpstatbacklinksproceduregetdistributiontld/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="seotoolsforexcel.com" Required="true"/>
			<Select Id="SearchType" DefaultValue="domain" Required="false">
        <DataSource>
					<Item Id="domain" Title="Domain"/>
          <Item Id="domain_with_subdomains" Title="Domain with Subdomains"/>
        </DataSource>
      </Select>
    </Parameters>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("query", Model.Domain);
					parameters.Add("searchType", Model.SearchType );

					var dict = GetPostBody(parameters, "SerpstatBacklinksProcedure.getDistributionTLD");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
				<JsonPath Expr="tld" Id="Tld" Title="TLD" Converter="String"/>
				<JsonPath Expr="country_name" Id="CountryName" Title="Country Name" Converter="String"/>
				<JsonPath Expr="country_code" Id="CountryCode" Title="Country Code" Converter="String"/>
				<JsonPath Expr="domains" Id="Domains" Title="Domains" Converter="Int"/>
				<JsonPath Expr="percentage" Id="Percentage" Title="Percentage" Converter="Double"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="ReferringDomains" Title="Referring Domains" Group="Backlink Analysis" HelpText="Gives you a list of referring domains of a site you analyze." HelpUrl="https://serpstat.com/api/312-reffering-domains/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="seotoolsforexcel.com" Required="true"/>
			<Select Id="SearchType" DefaultValue="domain" Required="false">
        <DataSource>
					<Item Id="domain" Title="Domain"/>
          <Item Id="domain_with_subdomains" Title="Domain with Subdomains"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("query", Model.Domain);
					parameters.Add("searchType", Model.SearchType );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatBacklinksProcedure.getRefDomains");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
				<JsonPath Expr="domain_from" Id="DomainFrom" Title="Domain From" Converter="String"/>
				<JsonPath Expr="ref_pages" Id="RefPages" Title="Ref Pages" Converter="Int"/>
				<JsonPath Expr="domainRank" Id="DomainRank" Title="Domain Rank" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="MaliciousDomainsDonors" Title="Malicious Domains-Donors" Group="Backlink Analysis" HelpText="Returns a list of malicious domains referring to the analyzed domain and information on them." HelpUrl="https://serpstat.com/api/714-malicious-domains/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="ahrefs.com" Required="true"/>
			<Select Id="SearchType" DefaultValue="domain" Required="false">
        <DataSource>
					<Item Id="domain" Title="Domain"/>
          <Item Id="domain_with_subdomains" Title="Domain with Subdomains"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("query", Model.Domain);
					parameters.Add("searchType", Model.SearchType );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatBacklinksProcedure.getThreats");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
				<JsonPath Expr="domain" Id="Domain" Title="Domain" Converter="String"/>
				<JsonPath Expr="domain_link" Id="DomainLink" Title="Domain Link" Converter="String"/>
				<JsonPath Expr="threat_type[0]" Id="ThreatType" Title="Threat Type" Converter="String"/>
				<JsonPath Expr="platform_type[0]" Id="PlatformType" Title="Platform Type" Converter="String"/>
				<JsonPath Expr="lastupdate" Id="LastUpdate" Title="Last Update" Converter="DateTime"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="MaliciousDomainsAcceptors" Title="Malicious Domains-Acceptors" Group="Backlink Analysis" HelpText="Returns a list of malicious domains referring to the analyzed domain and information on them." HelpUrl="https://serpstat.com/api/728-external-malicious-domains-getoutthreats/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="ahrefs.com" Required="true"/>
			<Select Id="SearchType" DefaultValue="domain" Required="false">
        <DataSource>
					<Item Id="domain" Title="Domain"/>
          <Item Id="domain_with_subdomains" Title="Domain with Subdomains"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("query", Model.Domain);
					parameters.Add("searchType", Model.SearchType );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatBacklinksProcedure.getOutThreats");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
				<JsonPath Expr="domain" Id="Domain" Title="Domain" Converter="String"/>
				<JsonPath Expr="domain_link" Id="DomainLink" Title="Domain Link" Converter="String"/>
				<JsonPath Expr="threat_type[0]" Id="ThreatType" Title="Threat Type" Converter="String"/>
				<JsonPath Expr="platform_type[0]" Id="PlatformType" Title="Platform Type" Converter="String"/>
				<JsonPath Expr="lastupdate" Id="LastUpdate" Title="Last Update" Converter="DateTime"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="ActiveBacklinks" Title="Active Backlinks" Group="Backlink Analysis" HelpText="Gives you a list of aсtive backlinks of a site you analyze." HelpUrl="https://serpstat.com/api/318-active-backlinks-getnewbacklinks/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="ahrefs.com" Required="true"/>
			<Select Id="SearchType" DefaultValue="domain" Required="false">
        <DataSource>
					<Item Id="domain" Title="Domain"/>
          <Item Id="domain_with_subdomains" Title="Domain with Subdomains"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("query", Model.Domain);
					parameters.Add("searchType", Model.SearchType );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatBacklinksProcedure.getNewBacklinks");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
				<JsonPath Expr="url_from" Id="UrlFrom" Title="URL From" Converter="String"/>
				<JsonPath Expr="url_to" Id="UrlTo" Title="URL To" Converter="String"/>
				<JsonPath Expr="nofollow" Id="Nofollow" Title="Nofollow" Converter="String"/>
				<JsonPath Expr="link_type" Id="LinkType" Title="Link Type" Converter="String"/>
				<JsonPath Expr="links_ext" Id="LinksExt" Title="Links External" Converter="Int"/>
				<JsonPath Expr="link_text" Id="LinkText" Title="Link Text" Converter="String"/>
				<JsonPath Expr="first_seen" Id="FirstSeen" Title="First Seen" Converter="DateTime"/>
				<JsonPath Expr="last_visited" Id="LastVisited" Title="Last Visited" Converter="DateTime"/>
				<JsonPath Expr="domain_rank" Id="DomainRank" Title="Domain Rank" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="LostBacklinks" Title="Lost Backlinks" Group="Backlink Analysis" HelpText="Gives you a list of lost backlinks of a site you analyze." HelpUrl="https://serpstat.com/api/318-active-backlinks-getnewbacklinks/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="ahrefs.com" Required="true"/>
			<Select Id="SearchType" DefaultValue="domain" Required="false">
        <DataSource>
					<Item Id="domain" Title="Domain"/>
          <Item Id="domain_with_subdomains" Title="Domain with Subdomains"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("query", Model.Domain);
					parameters.Add("searchType", Model.SearchType );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatBacklinksProcedure.getLostBacklinks");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
				<JsonPath Expr="url_from" Id="UrlFrom" Title="URL From" Converter="String"/>
				<JsonPath Expr="url_to" Id="UrlTo" Title="URL To" Converter="String"/>
				<JsonPath Expr="nofollow" Id="Nofollow" Title="Nofollow" Converter="String"/>
				<JsonPath Expr="link_type" Id="LinkType" Title="Link Type" Converter="String"/>
				<JsonPath Expr="links_ext" Id="LinksExt" Title="Links External" Converter="Int"/>
				<JsonPath Expr="link_text" Id="LinkText" Title="Link Text" Converter="String"/>
				<JsonPath Expr="first_seen" Id="FirstSeen" Title="First Seen" Converter="DateTime"/>
				<JsonPath Expr="last_visited" Id="LastVisited" Title="Last Visited" Converter="DateTime"/>
				<JsonPath Expr="date_del" Id="DateDeleted" Title="Date Deleted" Converter="DateTime"/>
				<JsonPath Expr="domain_rank" Id="DomainRank" Title="Domain Rank" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="ExternalActiveLinks" Title="External Active Links" Group="Backlink Analysis" HelpText="Gives you a list of external links of a site you analyze." HelpUrl="https://serpstat.com/api/324-external-backlinks-getoutlinks/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="ahrefs.com" Required="true"/>
			<Select Id="SearchType" DefaultValue="domain" Required="false">
        <DataSource>
					<Item Id="domain" Title="Domain"/>
          <Item Id="domain_with_subdomains" Title="Domain with Subdomains"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("query", Model.Domain);
					parameters.Add("searchType", Model.SearchType );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatBacklinksProcedure.getOutlinks");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
				<JsonPath Expr="url_from" Id="UrlFrom" Title="URL From" Converter="String"/>
				<JsonPath Expr="url_to" Id="UrlTo" Title="URL To" Converter="String"/>
				<JsonPath Expr="nofollow" Id="Nofollow" Title="Nofollow" Converter="String"/>
				<JsonPath Expr="link_type" Id="LinkType" Title="Link Type" Converter="String"/>
				<JsonPath Expr="links_ext" Id="LinksExt" Title="Links External" Converter="Int"/>
				<JsonPath Expr="link_text" Id="LinkText" Title="Link Text" Converter="String"/>
				<JsonPath Expr="first_seen" Id="FirstSeen" Title="First Seen" Converter="DateTime"/>
				<JsonPath Expr="last_visited" Id="LastVisited" Title="Last Visited" Converter="DateTime"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="ExternalLostLinks" Title="External Lost Links" Group="Backlink Analysis" HelpText="Gives you a list of lost external links of a site you analyze." HelpUrl="https://serpstat.com/api/756-external-lost-links-getlostoutlinks/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="ahrefs.com" Required="true"/>
			<Select Id="SearchType" DefaultValue="domain" Required="false">
        <DataSource>
					<Item Id="domain" Title="Domain"/>
          <Item Id="domain_with_subdomains" Title="Domain with Subdomains"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("query", Model.Domain);
					parameters.Add("searchType", Model.SearchType );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatBacklinksProcedure.getLostOutlinks");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
				<JsonPath Expr="url_from" Id="UrlFrom" Title="URL From" Converter="String"/>
				<JsonPath Expr="url_to" Id="UrlTo" Title="URL To" Converter="String"/>
				<JsonPath Expr="link_nofollow" Id="Nofollow" Title="Nofollow" Converter="String"/>
				<JsonPath Expr="link_type" Id="LinkType" Title="Link Type" Converter="String"/>
				<JsonPath Expr="links_external" Id="LinksExt" Title="Links External" Converter="Int"/>
				<JsonPath Expr="link_text" Id="LinkText" Title="Link Text" Converter="String"/>
				<JsonPath Expr="first_seen" Id="FirstSeen" Title="First Seen" Converter="DateTime"/>
				<JsonPath Expr="last_visited" Id="LastVisited" Title="Last Visited" Converter="DateTime"/>
				<JsonPath Expr="date_del" Id="DateDeleted" Title="Date Deleted" Converter="DateTime"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="ExternalDomains" Title="External Domains" Group="Backlink Analysis" HelpText="Gives you a list of the domains that are linked to the analyzed site." HelpUrl="https://serpstat.com/api/722-external-domains-getoutdomains/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="ahrefs.com" Required="true"/>
			<Select Id="SearchType" DefaultValue="domain" Required="false">
        <DataSource>
					<Item Id="domain" Title="Domain"/>
          <Item Id="domain_with_subdomains" Title="Domain with Subdomains"/>
          <Item Id="URL" Title="URL"/>
          <Item Id="part_url" Title="URL starts with"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("query", Model.Domain);
					parameters.Add("searchType", Model.SearchType );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatBacklinksProcedure.getOutDomains");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
				<JsonPath Expr="domain_to" Id="DomainTo" Title="Domain To" Converter="String"/>
				<JsonPath Expr="domain_links" Id="DomainLinks" Title="Domain Links" Converter="Int"/>
				<JsonPath Expr="domain_rank" Id="DomainRank" Title="Domain Rank" Converter="Int"/>
      </JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="Anchors" Title="Anchors" Group="Backlink Analysis" HelpText="Gives you a list of keywords used as anchors for backlinks of a site you analyze." HelpUrl="https://serpstat.com/api/334-anchors-getanchors/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="ahrefs.com" Required="true"/>
			<Select Id="SearchType" DefaultValue="domain" Required="false">
        <DataSource>
					<Item Id="domain" Title="Domain"/>
          <Item Id="domain_with_subdomains" Title="Domain with Subdomains"/>
          <Item Id="URL" Title="URL"/>
          <Item Id="part_url" Title="URL starts with"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("query", Model.Domain);
					parameters.Add("searchType", Model.SearchType );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatBacklinksProcedure.getAnchors");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
				<JsonPath Expr="anchor" Id="Anchor" Title="Anchor" Converter="String"/>
				<JsonPath Expr="refDomains" Id="RefDomains" Title="RefDomains" Converter="Int"/>
				<JsonPath Expr="total" Id="Total" Title="Total" Converter="Int"/>
				<JsonPath Expr="noFollow" Id="NoFollow" Title="NoFollow" Converter="Int"/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RestConnector Id="TopPagesBySite" Title="Top Pages by Site" Group="Backlink Analysis" HelpText="Gives you a list of leading pages of the analyzed site by the number of backlinks with referring pages, domains and IPs." HelpUrl="https://serpstat.com/api/328-top-pages-gettoppages/">
    <Parameters>
      <Text Id="Domain" Title="Domain" Debug.DefaultValue="ahrefs.com" Required="true"/>
			<Select Id="SearchType" DefaultValue="domain" Required="false">
        <DataSource>
					<Item Id="domain" Title="Domain"/>
          <Item Id="domain_with_subdomains" Title="Domain with Subdomains"/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="100"/>
		<Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestBody>
        <![CDATA[
				@{
					var parameters = new Dictionary<string, object>();
					parameters.Add("query", Model.Domain);
					parameters.Add("searchType", Model.SearchType );
					parameters.Add("page", Model.PageCursor.Page+1 );
					parameters.Add("size", Model.PageCursor.NextTake );

					var dict = GetPostBody(parameters, "SerpstatBacklinksProcedure.getTopPages");
				}
				@JsonConvert.SerializeObject(dict)
        ]]>
        </RequestBody>
      </HttpSettings>
			<Resource Id="Fetch.Url"/>
    </Fetch>
    <Parse>
      <JsonPath Expr="result.data[*]">
				<JsonPath Expr="url" Id="Url" Title="URL" Converter="String"/>
				<JsonPath Expr="urlTo" Id="UrlTo" Title="URL To" Converter="String"/>
				<JsonPath Expr="ref_pages" Id="RefPages" Title="Ref Pages" Converter="Int"/>
				<JsonPath Expr="ref_domains" Id="RefDomains" Title="Ref Domains" Converter="Int"/>
				<JsonPath Expr="ips" Id="IPs" Title="IPs" Converter="Int"/>
			</JsonPath>
    </Parse>
		<Resource Id="Fail"/>
  </RestConnector>

  <RazorFunctions>
    <![CDATA[
    Dictionary<string, object> GetPostBody(Dictionary<string, object> parameters, string method) {
			return new Dictionary<string, object>
			{
				{ "id", "seotools" },
				{ "method", method },
				{ "params", parameters }
			};
		}
    ]]>
  </RazorFunctions>

</Suite>